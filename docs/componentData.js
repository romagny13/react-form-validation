module.exports = [{"name":"Checkbox","description":"Creates an input type checkbox.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"checked":{"type":{"name":"bool"},"required":false,"description":"Allows to check the checkbox.","defaultValue":{"value":"false","computed":false}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Checkbox\\Example1.js","code":"import React from 'react';\r\nimport { Checkbox } from 'romagny13-react-form-validation';\r\n\r\nconst Example1 = () => {\r\n    let values = ['a','c'];\r\n    return (\r\n        <div>\r\n            <h4>Direct check</h4>\r\n            <Checkbox checked name=\"g1\" />\r\n\r\n            <h4>Grouped by name (all checked are checked)</h4>\r\n            <Checkbox checked name=\"g2\" />\r\n            <Checkbox checked name=\"g2\" />\r\n\r\n            <h4>Checked by value (if values contains control value)</h4>\r\n            <Checkbox name=\"g3\" value=\"a\" checked={values.indexOf(\"a\") !== -1}/>\r\n            <Checkbox name=\"g3\" value=\"b\" checked={values.indexOf(\"b\") !== -1}/>\r\n            <Checkbox name=\"g3\" value=\"c\" checked={values.indexOf(\"c\") !== -1}/>\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default Example1;\r\n\r\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Checkbox\\Example2.js","code":"import React from 'react';\r\nimport { Checkbox, Label } from 'romagny13-react-form-validation';\r\n\r\n/** Control is touched on lost focus */\r\nclass Example2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                agree: false\r\n            },\r\n            touched: {}\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        this.setState({\r\n            model\r\n        });\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n        this.setState({\r\n            touched\r\n        });\r\n    }\r\n    render() {\r\n        const { model, touched } = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"checkbox\">\r\n                    <Label asterisk>\r\n                        <Checkbox name=\"agree\" checked={model[\"agree\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                        I agree to terms\r\n                    </Label>\r\n                </div>\r\n                {touched[\"agree\"] && <span className=\"touched\">Touched!</span>}\r\n                <pre>\r\n                    {JSON.stringify(model)}\r\n                </pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n\r\n","description":"Control is touched on lost focus"},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Checkbox\\Example3.js","code":"import React from 'react';\r\nimport { Form, FormGroup, Checkbox, Label, required, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\n/** Validation (required) */\r\nclass Example3 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                agree: false\r\n            },\r\n            errors: {},\r\n            submitted: false,\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            agree: [required()]\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"agree\"]} canChangeValidationState={submitted || touched[\"agree\"]}>\r\n                    <div className=\"checkbox\">\r\n                        <Label asterisk>\r\n                            <Checkbox name=\"agree\" checked={model.agree} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                            I agree to terms\r\n                        </Label>\r\n                    </div>\r\n                </FormGroup>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n                <pre>\r\n                    {JSON.stringify(errors)}\r\n                </pre>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example3;\r\n\r\n","description":"Validation (required)"}]},{"name":"CheckboxGroup","description":"Creates a collection of checkbox with a dataSource.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"dataSource":{"type":{"name":"array"},"required":true,"description":"All values (example: ['a','b','c'])."},"values":{"type":{"name":"array"},"required":false,"description":"Checked values (example: ['a','c'])."},"blockClassName":{"type":{"name":"string"},"required":false,"description":"The class name to add on block (example: \"checkbox-inline\")."},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\CheckboxGroup\\Example1.js","code":"import React from 'react';\r\nimport { CheckboxGroup, Label } from 'romagny13-react-form-validation';\r\n\r\nclass Example1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                likes: ['Milk', 'Cakes']\r\n            },\r\n            touched: {}\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        this.setState({\r\n            model\r\n        });\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n        this.setState({\r\n            touched\r\n        });\r\n    }\r\n    render() {\r\n        const { model, touched } = this.state;\r\n        return (\r\n            <div>\r\n                <Label asterisk>Like (multiple choice)</Label>\r\n                <CheckboxGroup name=\"likes\" dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} values={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                {touched[\"likes\"] && <span className=\"touched\">Touched!</span>}\r\n                <pre>\r\n                    {JSON.stringify(model)}\r\n                </pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n\r\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\CheckboxGroup\\Example2.js","code":"import React from 'react';\r\nimport { Form, FormGroup, CheckboxGroup, Label, custom, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\n/** Validation (one or more selected items) */\r\nclass Example2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                likes: ['Milk', 'Cakes']\r\n            },\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            likes: [custom((value, model) => {\r\n                return model.likes.length > 0;\r\n            }, 'Please select one or more items.')],\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"likes\"]} canChangeValidationState={submitted || touched[\"likes\"]}>\r\n                    <Label asterisk>Like (multiple choice)</Label>\r\n                    <CheckboxGroup name=\"likes\" dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} values={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n                <pre>\r\n                    {JSON.stringify(errors)}\r\n                </pre>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n\r\n","description":"Validation (one or more selected items)"}]},{"name":"ErrorBlock","description":"Creates a span with the class name error-block.","props":{"children":{"type":{"name":"node"},"required":false,"description":"The children."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\ErrorBlock\\Example1.js","code":"import React from 'react';\r\nimport { ErrorBlock } from 'romagny13-react-form-validation';\r\n\r\nconst Example1 = () => {\r\n    return (\r\n        <ErrorBlock>My error</ErrorBlock>\r\n    );\r\n}\r\nexport default Example1;\r\n","description":""}]},{"name":"EyeIcon","description":"Creates an icon (with Font Awesome) with two states (eye opened and eye closed).","props":{"closed":{"type":{"name":"bool"},"required":false,"description":"Displays the \"eye-slash\" icon if true.","defaultValue":{"value":"false","computed":false}}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\EyeIcon\\Example1.js","code":"import React from 'react';\r\nimport { EyeIcon } from 'romagny13-react-form-validation';\r\n\r\nconst Example1 = () => {\r\n    return (\r\n        <div>\r\n            <h4>Normal</h4>\r\n            <EyeIcon />\r\n            \r\n            <h4>Closed</h4>\r\n            <EyeIcon closed />\r\n        </div>\r\n    );\r\n};\r\nexport default Example1;\r\n","description":""}]},{"name":"FontIcon","description":"Creates an icon (with Font Awesome).","props":{"iconName":{"type":{"name":"string"},"required":true,"description":"The name of the font icon (example: check for 'fa fa-check')."},"className":{"type":{"name":"string"},"required":false,"description":"Class name to add on icon."},"spin":{"type":{"name":"bool"},"required":false,"description":"Animates the icon (add 'fa-spin' to className).","defaultValue":{"value":"false","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"Fixed width (add 'fa-fw' to className).","defaultValue":{"value":"false","computed":false}},"larger":{"type":{"name":"enum","value":[{"value":"'lg'","computed":false},{"value":"'2x'","computed":false},{"value":"'3x'","computed":false},{"value":"'4x'","computed":false},{"value":"'5x'","computed":false}]},"required":false,"description":"Size of the icon (lg,2x,3x,4x,5x)."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\FontIcon\\Example1.js","code":"import React from 'react';\r\nimport { FontIcon } from 'romagny13-react-form-validation';\r\n\r\nconst Example1 = () => {\r\n    return (\r\n        <div>\r\n            <FontIcon iconName=\"check\"/>\r\n            <FontIcon iconName=\"times\" fixed/>\r\n        </div>\r\n    );\r\n};\r\nexport default Example1;","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\FontIcon\\Example2.js","code":"import React from 'react';\r\nimport { FontIcon } from 'romagny13-react-form-validation';\r\n\r\n/** Customize */\r\nconst Example2 = () => {\r\n    return (\r\n        <div>\r\n            <FontIcon iconName=\"camera\" larger=\"5x\" style={{ color: \"green\" }} />\r\n            <FontIcon iconName=\"refresh\" spin larger=\"5x\" fixed/>\r\n        </div>\r\n    );\r\n}\r\nexport default Example2;","description":"Customize"}]},{"name":"Form","description":"Creates a form with no-validate. Its possible to customize the appearence with a CSS Framework (Bootstrap for example).","examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Form\\Example1.js","code":"import React from 'react';\r\nimport { Form, FormGroup, Input, Submit, Reset, Label, required, minlength, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\nclass Example1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                firstname: 'Marie',\r\n                lastname: '',\r\n            },\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            firstname: [required('Firstname is required'), minlength()],\r\n            lastname: [required('Lastname is required')]\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onReset = this.onReset.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    onReset(initialState) {\r\n        this.setState(initialState);\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"firstname\"]} canChangeValidationState={submitted || touched[\"firstname\"]}>\r\n                    <Label htmlFor=\"firstname\" asterisk>Firstname</Label>\r\n                    <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n\r\n                <FormGroup error={errors[\"lastname\"]} canChangeValidationState={submitted || touched[\"lastname\"]}>\r\n                    <Label htmlFor=\"lastname\" asterisk>Lastname</Label>\r\n                    <Input id=\"lastname\" name=\"lastname\" value={model[\"lastname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <Submit value=\"Submit\" errors={errors} />\r\n                <Reset value=\"Reset\" initialState={this.state} onReset={this.onReset} />\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n\r\n\r\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Form\\Example2.js","code":"import React from 'react';\r\nimport { Label } from 'romagny13-react-form-validation';\r\n\r\n/** Customization with a CSS Framework */\r\nconst Example2 = () => {\r\n    return <iframe width=\"100%\" height=\"800\" frameBorder={false} src=\"./custom/demo.html\" />;\r\n};\r\nexport default Example2;\r\n","description":"Customization with a CSS Framework"}]},{"name":"FormGroup","description":"Creates a block that allows to display error and success.","props":{"children":{"type":{"name":"node"},"required":false,"description":"The children."},"canChangeValidationState":{"type":{"name":"bool"},"required":false,"description":"Allows to display error / success.","defaultValue":{"value":"false","computed":false}},"error":{"type":{"name":"string"},"required":false,"description":"The error message."},"renderSuccess":{"type":{"name":"bool"},"required":false,"description":"add success class name on success if true.","defaultValue":{"value":"false","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"The block class name.","defaultValue":{"value":"'form-group'","computed":false}},"errorClassName":{"type":{"name":"string"},"required":false,"description":"The error class name to add on block.","defaultValue":{"value":"'has-error'","computed":false}},"successClassName":{"type":{"name":"string"},"required":false,"description":"The success class name to add on block.","defaultValue":{"value":"'has-success'","computed":false}}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\FormGroup\\Example1.js","code":"import React from 'react';\r\nimport { FormGroup, Input, Label } from 'romagny13-react-form-validation';\r\n\r\n/** Normal state*/\r\nconst Example1 = () => {\r\n        return (\r\n            <FormGroup>\r\n                <Label htmlFor=\"my-field\">Field</Label>\r\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\r\n            </FormGroup>\r\n        );\r\n}\r\nexport default Example1;\r\n\r\n","description":"Normal state"},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\FormGroup\\Example2.js","code":"import React from 'react';\r\nimport { FormGroup, Input, Label } from 'romagny13-react-form-validation';\r\n\r\n/** Error state*/\r\nconst Example2 = () => {\r\n        return (\r\n            <FormGroup error=\"My error message\" canChangeValidationState>\r\n                <Label htmlFor=\"my-field\">Field</Label>\r\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\r\n            </FormGroup>\r\n        );\r\n}\r\nexport default Example2;\r\n\r\n","description":"Error state"},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\FormGroup\\Example3.js","code":"import React from 'react';\r\nimport { FormGroup, Input, Label } from 'romagny13-react-form-validation';\r\n\r\n/** Success state*/\r\nconst Example3 = () => {\r\n        return (\r\n            <FormGroup renderSuccess canChangeValidationState>\r\n                <Label htmlFor=\"my-field\">Field</Label>\r\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\r\n            </FormGroup>\r\n        );\r\n}\r\nexport default Example3;\r\n","description":"Success state"}]},{"name":"Input","description":"Creates an input element.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"The value to display.","defaultValue":{"value":"''","computed":false}},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'email'","computed":false},{"value":"'password'","computed":false},{"value":"'search'","computed":false},{"value":"'file'","computed":false},{"value":"'color'","computed":false},{"value":"'date'","computed":false},{"value":"'month'","computed":false},{"value":"'time'","computed":false},{"value":"'week'","computed":false},{"value":"'tel'","computed":false},{"value":"'url'","computed":false},{"value":"'number'","computed":false},{"value":"'range'","computed":false}]},"required":false,"description":"The type of the input field ('text', 'email', 'password', 'search', 'file', 'color', 'date', 'month', 'time', 'week', 'tel', 'url', 'number', 'range').","defaultValue":{"value":"'text'","computed":false}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Input\\Example1.js","code":"import React from 'react';\r\nimport { Input, Label } from 'romagny13-react-form-validation';\r\n\r\nclass Example1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                firstname: 'Marie'\r\n            },\r\n            touched: {}\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        this.setState({\r\n            model\r\n        });\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n        this.setState({\r\n            touched\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Label htmlFor=\"firstname\" asterisk>Firstname</Label>\r\n                <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                {this.state.touched[\"firstname\"] && <span className=\"touched\">Touched!</span>}\r\n                <pre>\r\n                    {JSON.stringify(this.state.model)}\r\n                </pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n\r\n\r\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Input\\Example2.js","code":"import React from 'react';\r\nimport { Form, FormGroup, Input, Label, required, minlength, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\n/** Validation */\r\nclass Example2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                firstname: '',\r\n            },\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            firstname: [required('Firstname is required'), minlength()]\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"firstname\"]} canChangeValidationState={submitted || touched[\"firstname\"]}>\r\n                    <Label htmlFor=\"firstname\" asterisk>Firstname</Label>\r\n                    <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n                <pre>\r\n                    {JSON.stringify(this.state.errors)}\r\n                </pre>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n\r\n\r\n","description":"Validation"},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Input\\Example3.js","code":"import React from 'react';\r\nimport { Form, FormGroup, Input, Label, required, minlength, pattern, email, custom, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\n/** All types */\r\nclass Example3 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                range: 0\r\n            },\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            email: [required(), email()],\r\n            search: [required()],\r\n            file: [required()],\r\n            /*  color: [required()],*/\r\n            date: [required()],\r\n            month: [required()],\r\n            time: [required()], week: [required()],\r\n            tel: [required()],\r\n            url: [required()],\r\n            number: [required(), custom((value) => {\r\n                return value >= 0 && value <= 100;\r\n            }, 'Value betwwen 0 and 100')],\r\n            range: [required()]\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n\r\n                <FormGroup error={errors[\"email\"]} canChangeValidationState={submitted}>\r\n                    <label htmlFor=\"email\" className=\"control-label\">Email</label>\r\n                    <Input type=\"email\" id=\"email\" name=\"email\" value={model[\"email\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"search\"]} canChangeValidationState={submitted || touched[\"search\"]}>\r\n                    <label htmlFor=\"search\" className=\"control-label\">Search</label>\r\n                    <Input type=\"search\" id=\"search\" name=\"search\" value={model[\"search\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"file\"]} canChangeValidationState={submitted || touched[\"file\"]}>\r\n                    <label htmlFor=\"file\" className=\"control-label\">File</label>\r\n                    <Input type=\"file\" id=\"file\" name=\"file\" value={model[\"file\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n\r\n                <FormGroup error={errors[\"date\"]} canChangeValidationState={submitted || touched[\"date\"]}>\r\n                    <label htmlFor=\"date\" className=\"control-label\">Date</label>\r\n                    <Input type=\"date\" id=\"date\" name=\"date\" value={model[\"date\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"month\"]} canChangeValidationState={submitted || touched[\"month\"]}>\r\n                    <label htmlFor=\"month\" className=\"control-label\">Month</label>\r\n                    <Input type=\"month\" id=\"month\" name=\"month\" value={model[\"month\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"time\"]} canChangeValidationState={submitted || touched[\"time\"]}>\r\n                    <label htmlFor=\"time\" className=\"control-label\">Time</label>\r\n                    <Input type=\"time\" id=\"time\" name=\"time\" value={model[\"time\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"week\"]} canChangeValidationState={submitted || touched[\"week\"]}>\r\n                    <label htmlFor=\"week\" className=\"control-label\">Week</label>\r\n                    <Input type=\"week\" id=\"week\" name=\"week\" value={model[\"week\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"tel\"]} canChangeValidationState={submitted || touched[\"tel\"]}>\r\n                    <label htmlFor=\"tel\" className=\"control-label\">Tel</label>\r\n                    <Input type=\"tel\" id=\"tel\" name=\"tel\" value={model[\"tel\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"url\"]} canChangeValidationState={submitted || touched[\"url\"]}>\r\n                    <label htmlFor=\"url\" className=\"control-label\">Url</label>\r\n                    <Input type=\"url\" id=\"url\" name=\"url\" value={model[\"url\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"number\"]} canChangeValidationState={submitted || touched[\"number\"]}>\r\n                    <label htmlFor=\"number\" className=\"control-label\">Number</label>\r\n                    <Input type=\"number\" id=\"number\" name=\"number\" value={model[\"number\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <FormGroup error={errors[\"range\"]} canChangeValidationState={submitted || touched[\"range\"]} renderSuccess>\r\n                    <label htmlFor=\"range\" className=\"control-label\">Range</label>\r\n                    <Input type=\"range\" id=\"range\" name=\"range\" value={model[\"range\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <br />\r\n                <input type=\"submit\" value=\"Submit\" />\r\n\r\n                <pre>\r\n                    {JSON.stringify(model)}\r\n                </pre>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example3;\r\n\r\n\r\n","description":"All types"}]},{"name":"Label","description":"Creates a label with asterisk for required field.","props":{"children":{"type":{"name":"node"},"required":false,"description":"The children."},"asterisk":{"type":{"name":"bool"},"required":false,"description":"Displays the asterisk if true.","defaultValue":{"value":"false","computed":false}},"asteriskColor":{"type":{"name":"string"},"required":false,"description":"The color of asterisk.","defaultValue":{"value":"'red'","computed":false}}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Label\\Example1.js","code":"import React from 'react';\r\nimport { Label } from 'romagny13-react-form-validation';\r\n\r\n\r\nconst Example1 = () => {\r\n        return (\r\n                <div>\r\n                        <h4>Normal</h4>\r\n                        <Label>My label</Label>\r\n\r\n                        <h4>With asterisk</h4>\r\n                        <Label asterisk>My label</Label>\r\n\r\n                        <h4>With asterisk color</h4>\r\n                        <Label asterisk asteriskColor=\"green\">My label</Label>\r\n                </div>\r\n\r\n        );\r\n};\r\nexport default Example1;\r\n\r\n","description":""}]},{"name":"LightGroup","description":"Creates a block that displays the error when there is an error.","props":{"children":{"type":{"name":"node"},"required":false,"description":"The children."},"error":{"type":{"name":"string"},"required":false,"description":"The error message."},"className":{"type":{"name":"string"},"required":false,"description":"The block class name.","defaultValue":{"value":"'form-group'","computed":false}},"errorClassName":{"type":{"name":"string"},"required":false,"description":"The error class name to add on block.","defaultValue":{"value":"'has-error'","computed":false}}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\LightGroup\\Example1.js","code":"import React from 'react';\r\nimport { LightGroup, Input, Label } from 'romagny13-react-form-validation';\r\n\r\n/** Normal state*/\r\nconst Example1 = () => {\r\n        return (\r\n            <LightGroup>\r\n                <Label htmlFor=\"my-field\">Field</Label>\r\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\r\n            </LightGroup>\r\n        );\r\n}\r\nexport default Example1;\r\n","description":"Normal state"},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\LightGroup\\Example2.js","code":"import React from 'react';\r\nimport { LightGroup, Input, Label } from 'romagny13-react-form-validation';\r\n\r\n/** Error state*/\r\nconst Example2 = () => {\r\n    return (\r\n        <LightGroup error=\"My error message\">\r\n            <Label htmlFor=\"my-field\">Field</Label>\r\n            <Input id=\"my-field\" name=\"my-field\" value=\"My value\" />\r\n        </LightGroup>\r\n    );\r\n}\r\nexport default Example2;\r\n\r\n","description":"Error state"}]},{"name":"Password","description":"Creates an input type password with an eye icon that allows to show password.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"type":{"type":{"name":"string"},"required":false,"description":"The type of the input field.","defaultValue":{"value":"'password'","computed":false}},"value":{"type":{"name":"string"},"required":false,"description":"The value to display.","defaultValue":{"value":"''","computed":false}},"renderEyeIcon":{"type":{"name":"bool"},"required":false,"description":"Allows to display eye if true.","defaultValue":{"value":"true","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"Allows to set the width of the element."},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Password\\Example1.js","code":"import React from 'react';\r\nimport { Password, Label } from 'romagny13-react-form-validation';\r\n\r\nclass Example1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                password: 'Secret'\r\n            },\r\n            touched: {}\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        this.setState({\r\n            model\r\n        });\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n        this.setState({\r\n            touched\r\n        });\r\n    }\r\n    render() {\r\n        const { model, touched } = this.state;\r\n        return (\r\n            <div>\r\n                <Label htmlFor=\"password\" asterisk>Password</Label>\r\n                <Password width=\"200px\" id=\"password\" name=\"password\" value={model[\"password\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} placeholder=\"Password\" />\r\n                {touched[\"password\"] && <span className=\"touched\">Touched!</span>}\r\n                <pre>\r\n                    {JSON.stringify(model)}\r\n                </pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Password\\Example2.js","code":"import React from 'react';\r\nimport { Form, FormGroup, Password, CheckboxGroup, Label, required, pattern, custom, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\n/** Validation (required, match) */\r\nclass Example2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                password: '',\r\n                confirmPassword: '',\r\n            },\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            password: [\r\n                required('Please enter a password.'),\r\n                pattern(/^(?=.*[A-Z]).{6}/, '6 characters minimum and one uppercase letter.')\r\n            ],\r\n            confirmPassword: [\r\n                required('Please confirm the password.'),\r\n                custom((value, model) => {\r\n                    return model.password === value;\r\n                }, 'Password and confirm password do not match.')\r\n            ]\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"password\"]} canChangeValidationState={submitted || touched[\"password\"]}>\r\n                    <Label htmlFor=\"password\" asterisk>Password</Label>\r\n                    <Password width=\"200px\" id=\"password\" name=\"password\" value={model[\"password\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} placeholder=\"Password\" />\r\n                </FormGroup>\r\n\r\n                <FormGroup error={this.state.errors[\"confirmPassword\"]} canChangeValidationState={this.state.submitted || touched[\"confirmPassword\"]}>\r\n                    <Label htmlFor=\"confirmPassword\" asterisk>Confirm password</Label>\r\n                    <Password width=\"200px\" id=\"confirmPassword\" name=\"confirmPassword\" value={model[\"confirmPassword\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} placeholder=\"Confirm password\" />\r\n                </FormGroup>\r\n\r\n                <input type=\"submit\" value=\"Submit\" />\r\n                <pre>\r\n                    {JSON.stringify(this.state.errors)}\r\n                </pre>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n\r\n","description":"Validation (required, match)"}]},{"name":"Radio","description":"Creates an input type radio.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"checked":{"type":{"name":"bool"},"required":false,"description":"Allows to check the checkbox","defaultValue":{"value":"false","computed":false}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Radio\\Example1.js","code":"import React from 'react';\r\nimport { Radio } from 'romagny13-react-form-validation';\r\n\r\nconst Example1 = () => {\r\n    let value = 'b';\r\n    return (\r\n        <div>\r\n            <h4>Direct check</h4>\r\n            <Radio checked name=\"g1\" />\r\n\r\n            <h4>Grouped by name (the last checked is checked)</h4>\r\n            <Radio checked name=\"g2\" />\r\n            <Radio checked name=\"g2\" />\r\n\r\n            <h4>Checked by value (if value === control value)</h4>\r\n            <Radio name=\"g3\" value=\"a\" checked={value === \"a\"}/>\r\n            <Radio name=\"g3\" value=\"b\" checked={value === \"b\"}/>\r\n            <Radio name=\"g3\" value=\"c\" checked={value === \"c\"}/>\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default Example1;\r\n\r\n","description":""}]},{"name":"RadioGroup","description":"Creates a collection of input type radio with a dataSource.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"dataSource":{"type":{"name":"array"},"required":true,"description":"All values (example: ['a','b','c'])."},"value":{"type":{"name":"string"},"required":false,"description":"Checked value (example: 'a')."},"blockClassName":{"type":{"name":"string"},"required":false,"description":"The class name to add on block (example: \"radio-inline\")."},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\RadioGroup\\Example1.js","code":"import React from 'react';\r\nimport { RadioGroup, Label } from 'romagny13-react-form-validation';\r\n\r\nclass Example1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                likes: 'Cakes'\r\n            },\r\n            touched: {}\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        this.setState({\r\n            model\r\n        });\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n        this.setState({\r\n            touched\r\n        });\r\n    }\r\n    render() {\r\n        const { model, touched } = this.state;\r\n        return (\r\n            <div>\r\n                <Label asterisk>Like (multiple choice)</Label>\r\n                <RadioGroup name=\"likes\" dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} value={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch}/>\r\n                {touched[\"likes\"] && <span className=\"touched\">Touched!</span>}\r\n                <pre>\r\n                    {JSON.stringify(model)}\r\n                </pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n\r\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\RadioGroup\\Example2.js","code":"import React from 'react';\r\nimport { Form, FormGroup, Label, RadioGroup, required, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\n/** Validation (required) */\r\nclass Example2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {},\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            likes: [required()],\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"likes\"]} canChangeValidationState={submitted || touched[\"likes\"]}>\r\n                    <Label asterisk>Like (multiple choice)</Label>\r\n                    <RadioGroup name=\"likes\" dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} value={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n                <pre>\r\n                    {JSON.stringify(errors)}\r\n                </pre>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n\r\n","description":"Validation (required)"}]},{"name":"Reset","description":"Creates a button that allows to reset form model and errors.","props":{"initialState":{"type":{"name":"object"},"required":true,"description":"The initial state (form model, errors, etc.)."},"onReset":{"type":{"name":"func"},"required":true,"description":"The function called on reset."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Reset\\Example1.js","code":"import React from 'react';\r\nimport { Form, FormGroup, Reset, Input, CheckboxGroup, Label, required, minlength, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\nclass Example1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                firstname: 'Marie',\r\n            },\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            firstname: [required(), minlength()]\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onReset = this.onReset.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    onReset(initialState) {\r\n        this.setState(initialState);\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"firstname\"]} canChangeValidationState={submitted || touched[\"firstname\"]}>\r\n                    <Label htmlFor=\"firstname\" asterisk>Firstname</Label>\r\n                    <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n                <Reset value=\"Reset\" initialState={this.state} onReset={this.onReset} />\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n\r\n\r\n","description":""}]},{"name":"Select","description":"Creates a select element.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"dataSource":{"type":{"name":"array"},"required":true,"description":"all values (example: ['a','b','c'])."},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}]},"required":false,"description":"selected value (example: 'a')."},"multiple":{"type":{"name":"bool"},"required":false,"description":"Allows to select multiple values."},"values":{"type":{"name":"array"},"required":false,"description":"selected values when multiple is true"},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Select\\Example1.js","code":"import React from 'react';\r\nimport { Select, Label } from 'romagny13-react-form-validation';\r\n\r\nclass Example1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                list: 2,\r\n            },\r\n            touched: {}\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        this.setState({\r\n            model\r\n        });\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n        this.setState({\r\n            touched\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n        return (\r\n            <div>\r\n                <Label htmlFor=\"list\" className=\"control-label\">List (no validation)</Label><br />\r\n                <Select name=\"list\" dataSource={[1, 2, 3]} value={model['list']} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                {touched[\"list\"] && <span className=\"touched\">Touched!</span>}\r\n                <pre>\r\n                    {JSON.stringify(model)}\r\n                </pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Select\\Example2.js","code":"import React from 'react';\r\nimport { Select, Label } from 'romagny13-react-form-validation';\r\n\r\n/** Select multiple (set multiple and use values array instead value) */\r\nclass Example2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                list: ['a', 'c'],\r\n            },\r\n            touched: {}\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        this.setState({\r\n            model\r\n        });\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n        this.setState({\r\n            touched\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n        return (\r\n            <div>\r\n                <Label htmlFor=\"list\" className=\"control-label\">List (no validation)</Label><br />\r\n                <Select name=\"list\" multiple dataSource={['a', 'b', 'c']} values={model['list']} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                {touched[\"list\"] && <span className=\"touched\">Touched!</span>}\r\n                <pre>\r\n                    {JSON.stringify(model)}\r\n                </pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n","description":"Select multiple (set multiple and use values array instead value)"},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Select\\Example3.js","code":"import React from 'react';\r\nimport { Form, FormGroup, Select, Label, custom, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\n/** Validation (one or more selected items) */\r\nclass Example3 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                likes: ['Milk', 'Cakes']\r\n            },\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            likes: [custom((value, model) => {\r\n                return model.likes.length > 0;\r\n            }, 'Please select one or more items.')],\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"likes\"]} canChangeValidationState={submitted || touched[\"likes\"]}>\r\n                    <Label asterisk>Like (multiple choice)</Label><br />\r\n                    <Select name=\"likes\" multiple dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} values={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                </FormGroup>\r\n                <input type=\"submit\" value=\"Submit\" />\r\n                <pre>\r\n                    {JSON.stringify(errors)}\r\n                </pre>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example3;\r\n","description":"Validation (one or more selected items)"}]},{"name":"Submit","description":"Creates an input type submit disabled if the form has errors.","props":{"disabled":{"type":{"name":"bool"},"required":false,"description":"Allows to disable the button."},"errors":{"type":{"name":"object"},"required":false,"description":"Disables the button with errors."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\Submit\\Example1.js","code":"import React from 'react';\r\nimport { Submit } from 'romagny13-react-form-validation';\r\n\r\nconst Example1 = () => {\r\n    let errors = { firstname: 'This field is required' };\r\n    return (\r\n        <div>\r\n            <h4>No error</h4>\r\n            <Submit value=\"Submit\" />\r\n            \r\n            <h4>With disabled</h4>\r\n            <Submit value=\"Submit\" disabled />\r\n\r\n            <h4>With errors</h4>\r\n            <Submit value=\"Submit\" errors={errors} />\r\n        </div>\r\n    );\r\n}\r\nexport default Example1;\r\n\r\n","description":""}]},{"name":"TextArea","description":"Creates a textarea element.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"value":{"type":{"name":"string"},"required":false,"description":"The value to display.","defaultValue":{"value":"''","computed":false}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\TextArea\\Example1.js","code":"import React from 'react';\r\nimport { TextArea, Label } from 'romagny13-react-form-validation';\r\n\r\nclass Example1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                note: 'My note'\r\n            },\r\n            touched: {}\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        this.setState({\r\n            model\r\n        });\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n        this.setState({\r\n            touched\r\n        });\r\n    }\r\n    render() {\r\n        const { model, touched } = this.state;\r\n        return (\r\n            <div>\r\n                <Label htmlFor=\"note\" asterisk>Note</Label><br />\r\n                <TextArea id=\"note\" name=\"note\" value={model[\"note\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\r\n                {touched[\"note\"] && <span className=\"touched\">Touched!</span>}\r\n                <pre>\r\n                    {JSON.stringify(model)}\r\n                </pre>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example1;\r\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\webpack\\react-form-validation\\docs\\examples\\TextArea\\Example2.js","code":"import React from 'react';\r\nimport { Form, FormGroup, TextArea, CheckboxGroup, Label, required, ValidationHelper } from 'romagny13-react-form-validation';\r\n\r\n/** Validation (required) */\r\nclass Example2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            model: {\r\n                note: ''\r\n            },\r\n            errors: {},\r\n            touched: {}\r\n        };\r\n\r\n        this.validations = {\r\n            note: [required()]\r\n        };\r\n\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onTouch = this.onTouch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange(name, value) {\r\n        let model = this.state.model;\r\n        model[name] = value;\r\n\r\n        if (this.state.submitted || this.state.touched[name]) {\r\n            let errors = ValidationHelper.validateAll(model, this.validations);\r\n\r\n            this.setState({\r\n                model,\r\n                errors\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                model\r\n            });\r\n        }\r\n    }\r\n    onTouch(name) {\r\n        let touched = this.state.touched;\r\n        touched[name] = true;\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n\r\n        this.setState({\r\n            touched,\r\n            errors\r\n        });\r\n\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let errors = ValidationHelper.validateAll(this.state.model, this.validations);\r\n        this.setState({\r\n            submitted: true,\r\n            errors\r\n        });\r\n    }\r\n    render() {\r\n        const { model, errors, touched, submitted } = this.state;\r\n\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <FormGroup error={errors[\"note\"]} canChangeValidationState={submitted || touched[\"note\"]}>\r\n                    <Label htmlFor=\"note\" asterisk>Note</Label><br />\r\n                    <TextArea id=\"note\" name=\"note\" value={model[\"note\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} rows=\"5\" />\r\n                </FormGroup>\r\n\r\n                <input type=\"submit\" value=\"Submit\" />\r\n                <pre>\r\n                    {JSON.stringify(this.state.errors)}\r\n                </pre>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example2;\r\n\r\n","description":"Validation (required)"}]}]
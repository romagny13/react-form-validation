module.exports = [{"name":"Checkbox","description":"Creates an input with the type \"checkbox\".","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"checked":{"type":{"name":"bool"},"required":false,"description":"Allows checking the element.","defaultValue":{"value":"false","computed":false}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Checkbox\\Example1.js","code":"import React from 'react';\nimport { Checkbox } from 'romagny13-react-form-validation';\n\nconst Example1 = () => {\n    let values = ['a','c'];\n    return (\n        <div>\n            <h4>Direct check</h4>\n            <Checkbox checked name=\"g1\" />\n\n            <h4>Grouped by name (all checked are checked)</h4>\n            <Checkbox checked name=\"g2\" />\n            <Checkbox checked name=\"g2\" />\n\n            <h4>Checked by value (if values contains control value)</h4>\n            <Checkbox name=\"g3\" value=\"a\" checked={values.indexOf(\"a\") !== -1}/>\n            <Checkbox name=\"g3\" value=\"b\" checked={values.indexOf(\"b\") !== -1}/>\n            <Checkbox name=\"g3\" value=\"c\" checked={values.indexOf(\"c\") !== -1}/>\n        </div>\n\n    );\n};\nexport default Example1;\n\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Checkbox\\Example2.js","code":"import React from 'react';\nimport { Checkbox, Label } from 'romagny13-react-form-validation';\n\n/** Control is touched on lost focus */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                agree: false\n            },\n            touched: {}\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        this.setState({\n            model\n        });\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n        this.setState({\n            touched\n        });\n    }\n    render() {\n        const { model, touched } = this.state;\n        return (\n            <div>\n                <div className=\"checkbox\">\n                    <Label asterisk>\n                        <Checkbox name=\"agree\" checked={model[\"agree\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                        I agree to terms\n                    </Label>\n                </div>\n                {touched[\"agree\"] && <span className=\"touched\">Touched!</span>}\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default Example2;\n\n","description":"Control is touched on lost focus "},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Checkbox\\Example3.js","code":"import React from 'react';\nimport { Form, LightGroup, Checkbox, Label, required, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** Validation (required) */\nclass Example3 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                agree: false\n            },\n            errors: {},\n            submitted: false,\n            touched: {}\n        };\n\n        this.validators = {\n            agree: [required()]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        if (this.state.submitted || this.state.touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    render() {\n        const { model, errors } = this.state;\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <LightGroup error={errors[\"agree\"]}>\n                    <div className=\"checkbox\">\n                        <Label asterisk>\n                            <Checkbox name=\"agree\" checked={model.agree} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                            I agree to terms\n                        </Label>\n                    </div>\n                </LightGroup>\n                <input type=\"submit\" value=\"Submit\" />\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example3;\n\n","description":"Validation (required) "}]},{"name":"CheckboxGroup","description":"Creates a collection of checkbox with a dataSource.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"dataSource":{"type":{"name":"array"},"required":true,"description":"All values (example: ['a','b','c'])."},"values":{"type":{"name":"array"},"required":false,"description":"Checked values (example: ['a','c'])."},"blockClassName":{"type":{"name":"string"},"required":false,"description":"The class name to add on block (example: \"checkbox-inline\")."},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\CheckboxGroup\\Example1.js","code":"import React from 'react';\nimport { CheckboxGroup, Label } from 'romagny13-react-form-validation';\n\nclass Example1 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                likes: ['Milk', 'Cakes']\n            },\n            touched: {}\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        this.setState({\n            model\n        });\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n        this.setState({\n            touched\n        });\n    }\n    render() {\n        const { model, touched } = this.state;\n        return (\n            <div>\n                <Label asterisk>Like (multiple choice)</Label>\n                <CheckboxGroup name=\"likes\" dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} values={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                {touched[\"likes\"] && <span className=\"touched\">Touched!</span>}\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default Example1;\n\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\CheckboxGroup\\Example2.js","code":"import React from 'react';\nimport { Form, LightGroup, CheckboxGroup, Label, custom, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** Validation (one or more selected items) */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                likes: ['Milk', 'Cakes']\n            },\n            errors: {},\n            touched: {}\n        };\n\n        this.validators = {\n            likes: [custom((value, model) => {\n                return model.likes.length > 0;\n            }, 'Please select one or more items.')],\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        const { model, touched, submitted } = this.state;\n\n        model[name] = value;\n\n        if (submitted || touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    render() {\n        const { model, errors } = this.state;\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <LightGroup error={errors[\"likes\"]}>\n                    <Label asterisk>Like (multiple choice)</Label>\n                    <CheckboxGroup name=\"likes\" dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} values={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <input type=\"submit\" value=\"Submit\" />\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example2;\n\n","description":"Validation (one or more selected items) "}]},{"name":"ErrorBlock","description":"Creates a span with the class name error-block.","props":{"children":{"type":{"name":"node"},"required":false,"description":"The children."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\ErrorBlock\\Example1.js","code":"import React from 'react';\nimport { ErrorBlock } from 'romagny13-react-form-validation';\n\nconst Example1 = () => {\n    return (\n        <ErrorBlock>My error</ErrorBlock>\n    );\n}\nexport default Example1;\n","description":""}]},{"name":"EyeIcon","description":"Creates an icon (with Font Awesome) with two states (eye opened and eye closed).","props":{"closed":{"type":{"name":"bool"},"required":false,"description":"Displays the \"eye-slash\" icon if true.","defaultValue":{"value":"false","computed":false}}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\EyeIcon\\Example1.js","code":"import React from 'react';\nimport { EyeIcon } from 'romagny13-react-form-validation';\n\nconst Example1 = () => {\n    return (\n        <div>\n            <h4>Normal</h4>\n            <EyeIcon />\n            \n            <h4>Closed</h4>\n            <EyeIcon closed />\n        </div>\n    );\n};\nexport default Example1;\n","description":""}]},{"name":"FontIcon","description":"Creates an icon (with Font Awesome).","props":{"iconName":{"type":{"name":"string"},"required":true,"description":"The name of the font icon (example: check for 'fa fa-check')."},"className":{"type":{"name":"string"},"required":false,"description":"Class name to add on icon."},"spin":{"type":{"name":"bool"},"required":false,"description":"Animates the icon (add 'fa-spin' to className).","defaultValue":{"value":"false","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"Fixed width (add 'fa-fw' to className).","defaultValue":{"value":"false","computed":false}},"larger":{"type":{"name":"enum","value":[{"value":"'lg'","computed":false},{"value":"'2x'","computed":false},{"value":"'3x'","computed":false},{"value":"'4x'","computed":false},{"value":"'5x'","computed":false}]},"required":false,"description":"Size of the icon (lg,2x,3x,4x,5x)."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\FontIcon\\Example1.js","code":"import React from 'react';\nimport { FontIcon } from 'romagny13-react-form-validation';\n\nconst Example1 = () => {\n    return (\n        <div>\n            <FontIcon iconName=\"check\"/>\n            <FontIcon iconName=\"times\" fixed/>\n        </div>\n    );\n};\nexport default Example1;","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\FontIcon\\Example2.js","code":"import React from 'react';\nimport { FontIcon } from 'romagny13-react-form-validation';\n\n/** Customize */\nconst Example2 = () => {\n    return (\n        <div>\n            <FontIcon iconName=\"camera\" larger=\"5x\" style={{ color: \"green\" }} />\n            <FontIcon iconName=\"refresh\" spin larger=\"5x\" fixed/>\n        </div>\n    );\n}\nexport default Example2;","description":"Customize "}]},{"name":"Form","description":"Creates a form with no-validate. Its possible to customize the appearence with CSS or a Framework (Bootstrap for example).","examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Form\\Example1.js","code":"import React from 'react';\nimport { Form, LightGroup, Input, Submit, Reset, Label, required, minlength, ValidationHelper } from 'romagny13-react-form-validation';\n/* or direct import to optimize bundle size:\nimport Form from 'romagny13-react-form-validation/lib/components/Form';\nimport LightGroup from 'romagny13-react-form-validation/lib/components/LightGroup';\nimport Input from 'romagny13-react-form-validation/lib/components/Input';\nimport Submit from 'romagny13-react-form-validation/lib/components/Submit';\nimport Submit from 'romagny13-react-form-validation/lib/components/Submit';\nimport Reset from 'romagny13-react-form-validation/lib/components/Reset';\nimport { required, minlength } from 'romagny13-react-form-validation/lib/helpers/validators';\nimport { ValidationHelper } from 'romagny13-react-form-validation/lib/helpers/ValidationHelper';\n*/\n\n/** Validation Strategy \"onSubmit\" */\nclass Example1 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                firstname: '',\n                lastname: '',\n            },\n            errors: {},\n            submitted: false\n        };\n\n        this.validators = {\n            firstname: [required('Firstname is required'), minlength()],\n            lastname: [required('Lastname is required')]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onReset = this.onReset.bind(this);\n    }\n    onValueChange(name, value) {\n        const { model, submitted } = this.state;\n\n        // change the value\n        model[name] = value;\n\n        if (submitted) {\n\n            // validate only the field\n            // let fieldValidators = this.validators[name];\n            // errors[name] = ValidationHelper.validateProperty(model, name, fieldValidators);\n\n            // ... or validate all\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    onReset(initialState) {\n        this.setState(initialState);\n    }\n    render() {\n        const { model, errors } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n\n                <LightGroup error={errors[\"firstname\"]}>\n                    <Label htmlFor=\"firstname\" asterisk>Firstname</Label><br />\n                    <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} autoFocus />\n                </LightGroup>\n\n                <LightGroup error={errors[\"lastname\"]}>\n                    <Label htmlFor=\"lastname\" asterisk>Lastname</Label><br />\n                    <Input id=\"lastname\" name=\"lastname\" value={model[\"lastname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n\n                <Submit value=\"Submit\" errors={errors} />\n\n                <Reset value=\"Reset\" initialState={this.state} onReset={this.onReset} />\n\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example1;\n\n\n","description":"Validation Strategy \"onSubmit\" "},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Form\\Example2.js","code":"import React from 'react';\nimport { Form, LightGroup, Input, Submit, Reset, Label, required, minlength, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** Validation Strategy \"onTouch\" */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {},\n            errors: {},\n            touched: {},\n            submitted: false\n        };\n\n        this.validators = {\n            firstname: [required('Firstname is required'), minlength()],\n            lastname: [required('Lastname is required')]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onReset = this.onReset.bind(this);\n    }\n    onValueChange(name, value) {\n        const { model, errors, touched, submitted } = this.state;\n\n        model[name] = value;\n\n        if (submitted || touched[name]) {\n\n            // validate only the field\n            let fieldValidations = this.validators[name];\n            errors[name] = ValidationHelper.validateProperty(model, name, fieldValidations);\n\n            // ... or all fields with validate all\n            //  let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        const { model, errors, touched } = this.state;\n\n        touched[name] = true;\n\n        // validate only the field\n        let fieldValidations = this.validators[name];\n        errors[name] = ValidationHelper.validateProperty(model, name, fieldValidations);\n\n        this.setState({\n            touched,\n            errors\n        });\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        // validate all\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            submitted: true,\n            errors\n        });\n\n    }\n    onReset(initialState) {\n        this.setState(initialState);\n    }\n    render() {\n        const { model, errors, touched } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n\n                <LightGroup error={errors[\"firstname\"]}>\n                    <Label htmlFor=\"firstname\" asterisk>Firstname</Label><br />\n                    <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n\n                <LightGroup error={errors[\"lastname\"]}>\n                    <Label htmlFor=\"lastname\" asterisk>Lastname</Label><br />\n                    <Input id=\"lastname\" name=\"lastname\" value={model[\"lastname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n\n                <Submit value=\"Submit\" errors={errors} />\n\n                <Reset value=\"Reset\" initialState={this.state} onReset={this.onReset} />\n\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n                <pre>\n                    {JSON.stringify(touched)}\n                </pre>\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example2;\n\n\n","description":"Validation Strategy \"onTouch\" "},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Form\\Example3.js","code":"import React from 'react';\nimport { Form, FormGroup, Input, Submit, Reset, Label, required, minlength, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** With FormGroup and \"success\" state */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                firstname: 'Marie',\n                lastname: '',\n            },\n            errors: {},\n            touched: {},\n            submitted: false\n        };\n\n        this.validators = {\n            firstname: [required('Firstname is required'), minlength()],\n            lastname: [required('Lastname is required')]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onReset = this.onReset.bind(this);\n    }\n    onValueChange(name, value) {\n        const { model, errors, touched, submitted } = this.state;\n\n        model[name] = value;\n\n        if (submitted || touched[name]) {\n\n            let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        const { model, errors, touched } = this.state;\n\n        touched[name] = true;\n\n        // validate only the field\n        let fieldValidations = this.validators[name];\n        errors[name] = ValidationHelper.validateProperty(model, name, fieldValidations);\n\n        this.setState({\n            touched,\n            errors\n        });\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        // validate all\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            submitted: true,\n            errors\n        });\n\n    }\n    onReset(initialState) {\n        this.setState(initialState);\n    }\n    render() {\n        const { model, errors, touched, submitted } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n\n                <FormGroup error={errors[\"firstname\"]} canChangeValidationState={submitted || touched[\"firstname\"]} renderSuccess>\n                    <Label htmlFor=\"firstname\" asterisk>Firstname</Label><br />\n                    <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </FormGroup>\n\n                <FormGroup error={errors[\"lastname\"]} canChangeValidationState={submitted || touched[\"firstname\"]} renderSuccess>\n                    <Label htmlFor=\"lastname\" asterisk>Lastname</Label><br />\n                    <Input id=\"lastname\" name=\"lastname\" value={model[\"lastname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </FormGroup>\n\n                <Submit value=\"Submit\" errors={errors} />\n\n                <Reset value=\"Reset\" initialState={this.state} onReset={this.onReset} />\n\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n                <pre>\n                    {JSON.stringify(touched)}\n                </pre>\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example2;\n\n\n","description":"With FormGroup and \"success\" state "},{"name":"Example4","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Form\\Example4.js","code":"import React from 'react';\nimport { Form, LightGroup, Input, Password, Submit, Reset, Label, required, minlength, pattern, email, custom, ValidationHelper } from 'romagny13-react-form-validation';\n\nconst validators = {\n    email: [required(), email()],\n    username: [required(), minlength()],\n    password: [\n        required('Please enter a password.'),\n        pattern(/^(?=.*[A-Z]).{6}/, '6 characters minimum and one uppercase letter.')\n    ],\n    confirmPassword: [\n        required('Please confirm the password.'),\n        custom((value, model) => {\n            return model.password === value;\n        }, 'Password and confirm password do not match.')\n    ]\n};\n\n\nfunction registerUser(user) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (user['email'] === 'mb@hotmail.com') {\n                reject({ email: 'A user with this email address is already registered.' });\n            }\n            else {\n                resolve(user);\n            }\n        }, 1500);\n    });\n}\n\n/** Async Validation \"onSubmit\" (simulate user registration fail) */\nclass Example4 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                email: 'mb@hotmail.com',\n                username: 'Marie',\n                password: 'Secret',\n                confirmPassword: 'Secret'\n            },\n            errors: {},\n            submitted: false\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        const { model, submitted } = this.state;\n\n        // change the value\n        model[name] = value;\n\n        if (submitted) {\n\n            let errors = ValidationHelper.validateAll(model, validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        const { model } = this.state;\n\n        let errors = ValidationHelper.validateAll(model, validators);\n\n        if (!ValidationHelper.hasErrors(errors)) {\n\n            registerUser(model).then(() => {\n\n                // ok ... navigate to login page for example\n\n            }, (errors) => {\n                this.setState({\n                    submitted: true,\n                    errors\n                });\n            });\n        }\n        else {\n            this.setState({\n                submitted: true,\n                errors\n            });\n        }\n    }\n    render() {\n        const { model, errors } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n\n                <LightGroup error={errors[\"email\"]}>\n                    <Label htmlFor=\"email\" asterisk>Email</Label><br />\n                    <Input type=\"email\" id=\"email\" name=\"email\" value={model[\"email\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n\n                <LightGroup error={errors[\"username\"]}>\n                    <Label htmlFor=\"username\" asterisk>Username</Label><br />\n                    <Input id=\"username\" name=\"username\" value={model[\"username\"]} onValueChange={this.onValueChange} onTouch={this.onTouch}  />\n                </LightGroup>\n\n                <LightGroup error={errors[\"password\"]}>\n                    <Label htmlFor=\"password\" asterisk>Password</Label>\n                    <Password width=\"173px\" id=\"password\" name=\"password\" value={model[\"password\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} placeholder=\"Password\" />\n                </LightGroup>\n\n                <LightGroup error={errors[\"confirmPassword\"]}>\n                    <Label htmlFor=\"confirmPassword\" asterisk>Confirm password</Label>\n                    <Password width=\"173px\" id=\"confirmPassword\" name=\"confirmPassword\" value={model[\"confirmPassword\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} placeholder=\"Confirm password\" />\n                </LightGroup>\n\n                <Submit value=\"Submit\" errors={errors} />\n            </Form>\n        );\n    }\n}\n\nexport default Example4;\n\n\n","description":"Async Validation \"onSubmit\" (simulate user registration fail) "},{"name":"Example5","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Form\\Example5.js","code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, LightGroup, Input, Submit, Reset, Label, required, minlength, ValidationHelper, clone } from 'romagny13-react-form-validation';\n\nimport { createStore } from 'redux';\nimport { connect, Provider } from 'react-redux';\n\n\n// action types\n\nconst UPDATE_USER = 'UPDATE_USER';\nconst UPDATE_AND_VALIDATE_USER = 'UPDATE_AND_VALIDATE_USER';\nconst VALIDATE_ALL = 'VALIDATE_ALL';\n\n// action creators\n\nconst updateUser = (name, value) => {\n    return { type: UPDATE_USER, key: name, value: value };\n};\n\nconst updateAndValidateUser = (name, value) => {\n    return { type: UPDATE_AND_VALIDATE_USER, key: name, value: value };\n};\n\nconst validateAll = () => {\n    return { type: VALIDATE_ALL };\n};\n\n// reducer\n\nconst validators = {\n    firstname: [required('Firstname required'), minlength()],\n    lastname: [required('Lastname required')]\n};\n\nconst formReducer = (state, action) => {\n\n    if (action.type === UPDATE_USER) {\n        const newState = clone(state);\n        newState.model[action.key] = action.value;\n        return newState;\n    }\n    else if (action.type === UPDATE_AND_VALIDATE_USER) {\n        const newState = clone(state);\n        newState.model[action.key] = action.value;\n        newState.errors = ValidationHelper.validateAll(newState.model, validators);\n        return newState;\n    }\n    else if (action.type === VALIDATE_ALL) {\n        const newState = clone(state);\n        newState.errors = ValidationHelper.validateAll(newState.model, validators);\n        newState.submitted = true;\n        return newState;\n    }\n\n    return state;\n}; \n\n// form component\n\nconst MyForm = ({ model, errors, onValueChange, onSubmit }) => {\n\n    return (\n        <form onSubmit={onSubmit}>\n\n            <LightGroup error={errors[\"firstname\"]}>\n                <Label htmlFor=\"firstname\" asterisk>Firstname</Label><br />\n                <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={onValueChange} />\n            </LightGroup>\n\n            <LightGroup error={errors[\"lastname\"]}>\n                <Label htmlFor=\"lastname\" asterisk>Lastname</Label><br />\n                <Input id=\"lastname\" name=\"lastname\" value={model[\"lastname\"]} onValueChange={onValueChange} />\n            </LightGroup>\n\n            <Submit value=\"Submit\" errors={errors} />\n\n            <pre>\n                {JSON.stringify(model)}\n            </pre>\n\n            <pre>\n                {JSON.stringify(errors)}\n            </pre>\n        </form>\n    );\n};\nMyForm.propTypes = {\n    model: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n    onValueChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired\n};\n\n// container\n\nclass MyContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        const { submitted } = this.props;\n\n        if (submitted) {\n            this.props.dispatch(updateAndValidateUser(name, value));\n        }\n        else {\n            this.props.dispatch(updateUser(name, value));\n        }\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        this.props.dispatch(validateAll());\n    }\n    render() {\n        const { model, errors } = this.props;\n        return <MyForm model={model} errors={errors} onValueChange={this.onValueChange} onSubmit={this.onSubmit} />;\n    }\n}\nMyContainer.propTypes = {\n    model: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n    submitted: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        model: state.model,\n        errors: state.errors,\n        submitted: state.submitted\n    };\n};\nconst Connected = connect(mapStateToProps)(MyContainer);\n\n// store\n\nconst store = createStore(formReducer, {\n    model: {\n        firstname: 'Marie',\n        lastname: ''\n    },\n    errors: {},\n    submitted: false\n});\n\n\n// Provider + connected container\n\n/** Redux */\nexport class Example5 extends React.Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Connected />\n            </Provider>\n        );\n    }\n}\n\nexport default Example5;\n\n","description":"Redux "},{"name":"Example6","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Form\\Example6.js","code":"import React from 'react';\nimport { Label } from 'romagny13-react-form-validation';\n\n/** Customization with a CSS Framework */\nconst Example6 = () => {\n    return <iframe width=\"100%\" height=\"800\" frameBorder={false} src=\"./custom/demo.html\" />;\n};\nexport default Example6;\n","description":"Customization with a CSS Framework "}]},{"name":"FormGroup","description":"Creates a block that allows displaying error and success. Its possible to customize font and border colors with CSS (class names: \"form-group\", \"has-error\", \"has-success\", \"error-block\").","props":{"children":{"type":{"name":"node"},"required":false,"description":"The children."},"canChangeValidationState":{"type":{"name":"bool"},"required":false,"description":"Allows displaying error / success.","defaultValue":{"value":"false","computed":false}},"error":{"type":{"name":"string"},"required":false,"description":"The error message."},"renderSuccess":{"type":{"name":"bool"},"required":false,"description":"add success class name on success if true.","defaultValue":{"value":"false","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"The block class name.","defaultValue":{"value":"'form-group'","computed":false}},"errorClassName":{"type":{"name":"string"},"required":false,"description":"The error class name to add on block.","defaultValue":{"value":"'has-error'","computed":false}},"successClassName":{"type":{"name":"string"},"required":false,"description":"The success class name to add on block.","defaultValue":{"value":"'has-success'","computed":false}}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\FormGroup\\Example1.js","code":"import React from 'react';\nimport { FormGroup, Input, Label } from 'romagny13-react-form-validation';\n\n/** Normal state*/\nconst Example1 = () => {\n        return (\n            <FormGroup>\n                <Label htmlFor=\"my-field\">Field</Label>\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\n            </FormGroup>\n        );\n}\nexport default Example1;\n\n","description":"Normal state"},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\FormGroup\\Example2.js","code":"import React from 'react';\nimport { FormGroup, Input, Label } from 'romagny13-react-form-validation';\n\n/** Error state*/\nconst Example2 = () => {\n        return (\n            <FormGroup error=\"My error message\" canChangeValidationState>\n                <Label htmlFor=\"my-field\">Field</Label>\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\n            </FormGroup>\n        );\n}\nexport default Example2;\n\n","description":"Error state"},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\FormGroup\\Example3.js","code":"import React from 'react';\nimport { FormGroup, Input, Label } from 'romagny13-react-form-validation';\n\n/** Success state*/\nconst Example3 = () => {\n        return (\n            <FormGroup renderSuccess canChangeValidationState>\n                <Label htmlFor=\"my-field\">Field</Label>\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\n            </FormGroup>\n        );\n}\nexport default Example3;\n","description":"Success state"},{"name":"Example4","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\FormGroup\\Example4.js","code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, Input, Label, FontIcon } from 'romagny13-react-form-validation';\n\nconst CustomFormGroup = ({ canChangeValidationState, error, children, onValueChange }) => {\n\n    return (\n        <FormGroup className={canChangeValidationState ? error ? 'form-group has-error has-feedback' : 'form-group has-success has-feedback' : 'form-group'} \n                   error={error} canChangeValidationState={canChangeValidationState} renderSuccess>\n            {children}\n            {canChangeValidationState && <FontIcon iconName={error ? \"times\" : \"check\"} className=\"feedback\" />}\n        </FormGroup>\n    );\n};\nCustomFormGroup.propTypes = {\n    children: PropTypes.node,\n    canChangeValidationState: PropTypes.bool,\n    error: PropTypes.string,\n    onValueChange: PropTypes.func\n};\n\n/** Create a custom FormGroup (example with feedback) */\nconst Example4 = () => {\n        return (\n            <CustomFormGroup renderSuccess canChangeValidationState>\n                <Label htmlFor=\"my-field\">Field</Label>\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\n            </CustomFormGroup>\n        );\n}\nexport default Example4;\n\n","description":"Create a custom FormGroup (example with feedback) "}]},{"name":"Input","description":"Creates an input element.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"The value.","defaultValue":{"value":"''","computed":false}},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'email'","computed":false},{"value":"'password'","computed":false},{"value":"'search'","computed":false},{"value":"'file'","computed":false},{"value":"'color'","computed":false},{"value":"'date'","computed":false},{"value":"'month'","computed":false},{"value":"'time'","computed":false},{"value":"'week'","computed":false},{"value":"'tel'","computed":false},{"value":"'url'","computed":false},{"value":"'number'","computed":false},{"value":"'range'","computed":false}]},"required":false,"description":"The type of the input field ('text', 'email', 'password', 'search', 'file', 'color', 'date', 'month', 'time', 'week', 'tel', 'url', 'number', 'range').","defaultValue":{"value":"'text'","computed":false}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Input\\Example1.js","code":"import React from 'react';\nimport { Input, Label } from 'romagny13-react-form-validation';\n\nclass Example1 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                firstname: 'Marie'\n            },\n            touched: {}\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        this.setState({\n            model\n        });\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n        this.setState({\n            touched\n        });\n    }\n    render() {\n        const { model, errors, touched, submitted } = this.state;\n\n        return (\n            <div>\n                <Label htmlFor=\"firstname\" asterisk>Firstname</Label>\n                <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                {touched[\"firstname\"] && <span className=\"touched\">Touched!</span>}\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default Example1;\n\n\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Input\\Example2.js","code":"import React from 'react';\nimport { Form, FormGroup, Input, Label, required, minlength, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** Validation */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                firstname: '',\n            },\n            errors: {},\n            touched: {}\n        };\n\n        this.validators = {\n            firstname: [required('Firstname is required'), minlength()]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        if (this.state.submitted || this.state.touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    render() {\n        const { model, errors, touched, submitted } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <FormGroup error={errors[\"firstname\"]} canChangeValidationState={submitted || touched[\"firstname\"]}>\n                    <Label htmlFor=\"firstname\" asterisk>Firstname</Label>\n                    <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </FormGroup>\n                <input type=\"submit\" value=\"Submit\" />\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example2;\n\n\n","description":"Validation "},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Input\\Example3.js","code":"import React from 'react';\nimport { Form, LightGroup, Input, Label, required, minlength, pattern, email, custom, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** All types */\nclass Example3 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                range: 0\n            },\n            errors: {},\n            touched: {}\n        };\n\n        this.validators = {\n            email: [required(), email()],\n            search: [required()],\n            file: [required()],\n            /*  color: [required()],*/\n            date: [required()],\n            month: [required()],\n            time: [required()], week: [required()],\n            tel: [required()],\n            url: [required()],\n            number: [required(), custom((value) => {\n                return value >= 0 && value <= 100;\n            }, 'Value betwwen 0 and 100')],\n            range: [required()]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        const { model, touched, submitted } = this.state;\n\n        model[name] = value;\n\n        if (submitted || touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    render() {\n        const { model, errors } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n\n                <LightGroup error={errors[\"email\"]}>\n                    <label htmlFor=\"email\" className=\"control-label\">Email</label>\n                    <Input type=\"email\" id=\"email\" name=\"email\" value={model[\"email\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"search\"]}>\n                    <label htmlFor=\"search\" className=\"control-label\">Search</label>\n                    <Input type=\"search\" id=\"search\" name=\"search\" value={model[\"search\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"file\"]}>\n                    <label htmlFor=\"file\" className=\"control-label\">File</label>\n                    <Input type=\"file\" id=\"file\" name=\"file\" value={model[\"file\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n\n                <LightGroup error={errors[\"date\"]}>\n                    <label htmlFor=\"date\" className=\"control-label\">Date</label>\n                    <Input type=\"date\" id=\"date\" name=\"date\" value={model[\"date\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"month\"]}>\n                    <label htmlFor=\"month\" className=\"control-label\">Month</label>\n                    <Input type=\"month\" id=\"month\" name=\"month\" value={model[\"month\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"time\"]}>\n                    <label htmlFor=\"time\" className=\"control-label\">Time</label>\n                    <Input type=\"time\" id=\"time\" name=\"time\" value={model[\"time\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"week\"]}>\n                    <label htmlFor=\"week\" className=\"control-label\">Week</label>\n                    <Input type=\"week\" id=\"week\" name=\"week\" value={model[\"week\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"tel\"]}>\n                    <label htmlFor=\"tel\" className=\"control-label\">Tel</label>\n                    <Input type=\"tel\" id=\"tel\" name=\"tel\" value={model[\"tel\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"url\"]}>\n                    <label htmlFor=\"url\" className=\"control-label\">Url</label>\n                    <Input type=\"url\" id=\"url\" name=\"url\" value={model[\"url\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"number\"]}>\n                    <label htmlFor=\"number\" className=\"control-label\">Number</label>\n                    <Input type=\"number\" id=\"number\" name=\"number\" value={model[\"number\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <LightGroup error={errors[\"range\"]}>\n                    <label htmlFor=\"range\" className=\"control-label\">Range</label>\n                    <Input type=\"range\" id=\"range\" name=\"range\" value={model[\"range\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <br />\n                <input type=\"submit\" value=\"Submit\" />\n\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example3;\n\n\n","description":"All types "}]},{"name":"Label","description":"Creates a label with asterisk for required field.","props":{"children":{"type":{"name":"node"},"required":false,"description":"The children."},"asterisk":{"type":{"name":"bool"},"required":false,"description":"Displays the asterisk if true.","defaultValue":{"value":"false","computed":false}},"asteriskColor":{"type":{"name":"string"},"required":false,"description":"The color of asterisk.","defaultValue":{"value":"'red'","computed":false}}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Label\\Example1.js","code":"import React from 'react';\nimport { Label } from 'romagny13-react-form-validation';\n\n\nconst Example1 = () => {\n        return (\n                <div>\n                        <h4>Normal</h4>\n                        <Label>My label</Label>\n\n                        <h4>With asterisk</h4>\n                        <Label asterisk>My label</Label>\n\n                        <h4>With asterisk color</h4>\n                        <Label asterisk asteriskColor=\"green\">My label</Label>\n                </div>\n\n        );\n};\nexport default Example1;\n\n","description":""}]},{"name":"LightGroup","description":"Creates a block that allows displaying error.","props":{"children":{"type":{"name":"node"},"required":false,"description":"The children."},"error":{"type":{"name":"string"},"required":false,"description":"The error message."},"className":{"type":{"name":"string"},"required":false,"description":"The block class name.","defaultValue":{"value":"'form-group'","computed":false}},"errorClassName":{"type":{"name":"string"},"required":false,"description":"The error class name to add on block.","defaultValue":{"value":"'has-error'","computed":false}}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\LightGroup\\Example1.js","code":"import React from 'react';\nimport { LightGroup, Input, Label } from 'romagny13-react-form-validation';\n\n/** Normal state*/\nconst Example1 = () => {\n        return (\n            <LightGroup>\n                <Label htmlFor=\"my-field\">Field</Label>\n                <Input id=\"my-field\" name=\"my-field\" value=\"My value\"  />\n            </LightGroup>\n        );\n}\nexport default Example1;\n","description":"Normal state"},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\LightGroup\\Example2.js","code":"import React from 'react';\nimport { LightGroup, Input, Label } from 'romagny13-react-form-validation';\n\n/** Error state*/\nconst Example2 = () => {\n    return (\n        <LightGroup error=\"My error message\">\n            <Label htmlFor=\"my-field\">Field</Label>\n            <Input id=\"my-field\" name=\"my-field\" value=\"My value\" />\n        </LightGroup>\n    );\n}\nexport default Example2;\n\n","description":"Error state"}]},{"name":"Password","description":"Creates an input type password with an eye icon that allows showing password.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"type":{"type":{"name":"string"},"required":false,"description":"The type of the input field.","defaultValue":{"value":"'password'","computed":false}},"value":{"type":{"name":"string"},"required":false,"description":"The value.","defaultValue":{"value":"''","computed":false}},"renderEyeIcon":{"type":{"name":"bool"},"required":false,"description":"Allows displaying eye if true.","defaultValue":{"value":"true","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"Allows to set the width of the element."},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Password\\Example1.js","code":"import React from 'react';\nimport { Password, Label } from 'romagny13-react-form-validation';\n\nclass Example1 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                password: 'Secret'\n            },\n            touched: {}\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        this.setState({\n            model\n        });\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n        this.setState({\n            touched\n        });\n    }\n    render() {\n        const { model, touched } = this.state;\n        return (\n            <div>\n                <Label htmlFor=\"password\" asterisk>Password</Label>\n                <Password width=\"200px\" id=\"password\" name=\"password\" value={model[\"password\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} placeholder=\"Password\" />\n                {touched[\"password\"] && <span className=\"touched\">Touched!</span>}\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default Example1;\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Password\\Example2.js","code":"import React from 'react';\nimport { Form, LightGroup, Password, CheckboxGroup, Label, required, pattern, custom, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** Validation (required, match) */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                password: '',\n                confirmPassword: '',\n            },\n            errors: {},\n            touched: {}\n        };\n\n        this.validators = {\n            password: [\n                required('Please enter a password.'),\n                pattern(/^(?=.*[A-Z]).{6}/, '6 characters minimum and one uppercase letter.')\n            ],\n            confirmPassword: [\n                required('Please confirm the password.'),\n                custom((value, model) => {\n                    return model.password === value;\n                }, 'Password and confirm password do not match.')\n            ]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        const { model, touched, submitted } = this.state;\n\n        model[name] = value;\n\n        if (submitted || touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    render() {\n        const { model, errors } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <LightGroup error={errors[\"password\"]}>\n                    <Label htmlFor=\"password\" asterisk>Password</Label>\n                    <Password width=\"200px\" id=\"password\" name=\"password\" value={model[\"password\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} placeholder=\"Password\" />\n                </LightGroup>\n\n                <LightGroup error={errors[\"confirmPassword\"]}>\n                    <Label htmlFor=\"confirmPassword\" asterisk>Confirm password</Label>\n                    <Password width=\"200px\" id=\"confirmPassword\" name=\"confirmPassword\" value={model[\"confirmPassword\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} placeholder=\"Confirm password\" />\n                </LightGroup>\n\n                <input type=\"submit\" value=\"Submit\" />\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example2;\n\n","description":"Validation (required, match) "}]},{"name":"Radio","description":"Creates an input type radio.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"checked":{"type":{"name":"bool"},"required":false,"description":"Allows checking the element.","defaultValue":{"value":"false","computed":false}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Radio\\Example1.js","code":"import React from 'react';\nimport { Radio } from 'romagny13-react-form-validation';\n\nconst Example1 = () => {\n    let value = 'b';\n    return (\n        <div>\n            <h4>Direct check</h4>\n            <Radio checked name=\"g1\" />\n\n            <h4>Grouped by name (the last checked is checked)</h4>\n            <Radio checked name=\"g2\" />\n            <Radio checked name=\"g2\" />\n\n            <h4>Checked by value (if value === control value)</h4>\n            <Radio name=\"g3\" value=\"a\" checked={value === \"a\"}/>\n            <Radio name=\"g3\" value=\"b\" checked={value === \"b\"}/>\n            <Radio name=\"g3\" value=\"c\" checked={value === \"c\"}/>\n        </div>\n\n    );\n};\nexport default Example1;\n\n","description":""}]},{"name":"RadioGroup","description":"Creates a collection of input type radio with a dataSource.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"dataSource":{"type":{"name":"array"},"required":true,"description":"All values (example: ['a','b','c'])."},"value":{"type":{"name":"string"},"required":false,"description":"Checked value (example: 'a')."},"blockClassName":{"type":{"name":"string"},"required":false,"description":"The class name to add on block (example: \"radio-inline\")."},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\RadioGroup\\Example1.js","code":"import React from 'react';\nimport { RadioGroup, Label } from 'romagny13-react-form-validation';\n\nclass Example1 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                likes: 'Cakes'\n            },\n            touched: {}\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        this.setState({\n            model\n        });\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n        this.setState({\n            touched\n        });\n    }\n    render() {\n        const { model, touched } = this.state;\n        return (\n            <div>\n                <Label asterisk>Like (multiple choice)</Label>\n                <RadioGroup name=\"likes\" dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} value={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch}/>\n                {touched[\"likes\"] && <span className=\"touched\">Touched!</span>}\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default Example1;\n\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\RadioGroup\\Example2.js","code":"import React from 'react';\nimport { Form, LightGroup, Label, RadioGroup, required, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** Validation (required) */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {},\n            errors: {},\n            touched: {}\n        };\n\n        this.validators = {\n            likes: [required()],\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        if (this.state.submitted || this.state.touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    render() {\n        const { model, errors } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <LightGroup error={errors[\"likes\"]}>\n                    <Label asterisk>Like (multiple choice)</Label>\n                    <RadioGroup name=\"likes\" dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} value={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <input type=\"submit\" value=\"Submit\" />\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example2;\n\n","description":"Validation (required) "}]},{"name":"Reset","description":"Creates a button that allows resetting to initial state.","props":{"initialState":{"type":{"name":"object"},"required":true,"description":"The initial state (form model, errors, etc.)."},"onReset":{"type":{"name":"func"},"required":true,"description":"The function called on reset."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Reset\\Example1.js","code":"import React from 'react';\nimport { Form, LightGroup, Reset, Input, CheckboxGroup, Label, required, minlength, ValidationHelper } from 'romagny13-react-form-validation';\n\nclass Example1 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                firstname: 'Marie',\n            },\n            errors: {},\n            touched: {}\n        };\n\n        this.validators = {\n            firstname: [required(), minlength()]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onReset = this.onReset.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        if (this.state.submitted || this.state.touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    onReset(initialState) {\n        this.setState(initialState);\n    }\n    render() {\n        const { model, errors } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <LightGroup error={errors[\"firstname\"]}>\n                    <Label htmlFor=\"firstname\" asterisk>Firstname</Label>\n                    <Input id=\"firstname\" name=\"firstname\" value={model[\"firstname\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <input type=\"submit\" value=\"Submit\" />\n                <Reset value=\"Reset\" initialState={this.state} onReset={this.onReset} />\n            </Form>\n        );\n    }\n}\n\nexport default Example1;\n\n\n","description":""}]},{"name":"Select","description":"Creates a select element.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"dataSource":{"type":{"name":"array"},"required":true,"description":"all values (example: ['a','b','c'])."},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}]},"required":false,"description":"selected value (example: 'a')."},"multiple":{"type":{"name":"bool"},"required":false,"description":"Allows to select multiple values."},"values":{"type":{"name":"array"},"required":false,"description":"selected values when multiple is true"},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Select\\Example1.js","code":"import React from 'react';\nimport { Select, Label } from 'romagny13-react-form-validation';\n\nclass Example1 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                list: 2,\n            },\n            touched: {}\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        this.setState({\n            model\n        });\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n        this.setState({\n            touched\n        });\n    }\n    render() {\n        const { model, errors, touched, submitted } = this.state;\n        return (\n            <div>\n                <Label htmlFor=\"list\" className=\"control-label\">List (no validation)</Label><br />\n                <Select name=\"list\" dataSource={[1, 2, 3]} value={model['list']} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                {touched[\"list\"] && <span className=\"touched\">Touched!</span>}\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default Example1;\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Select\\Example2.js","code":"import React from 'react';\nimport { Select, Label } from 'romagny13-react-form-validation';\n\n/** Select multiple (set multiple and use values array instead value) */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                list: ['a', 'c'],\n            },\n            touched: {}\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        this.setState({\n            model\n        });\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n        this.setState({\n            touched\n        });\n    }\n    render() {\n        const { model, errors, touched } = this.state;\n        return (\n            <div>\n                <Label htmlFor=\"list\" className=\"control-label\">List (no validation)</Label><br />\n                <Select name=\"list\" multiple dataSource={['a', 'b', 'c']} values={model['list']} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                {touched[\"list\"] && <span className=\"touched\">Touched!</span>}\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default Example2;\n","description":"Select multiple (set multiple and use values array instead value) "},{"name":"Example3","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Select\\Example3.js","code":"import React from 'react';\nimport { Form, LightGroup, Select, Label, custom, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** Validation (one or more selected items) */\nclass Example3 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                likes: ['Milk', 'Cakes']\n            },\n            errors: {},\n            touched: {}\n        };\n\n        this.validators = {\n            likes: [custom((value, model) => {\n                return model.likes.length > 0;\n            }, 'Please select one or more items.')],\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        if (this.state.submitted || this.state.touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    render() {\n        const { model, errors } = this.state;\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <LightGroup error={errors[\"likes\"]}>\n                    <Label asterisk>Like (multiple choice)</Label><br />\n                    <Select name=\"likes\" multiple dataSource={[\"Milk\", \"Cakes\", \"Nutella\"]} values={model[\"likes\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                </LightGroup>\n                <input type=\"submit\" value=\"Submit\" />\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example3;\n","description":"Validation (one or more selected items) "}]},{"name":"Submit","description":"Creates an input type submit disabled if the form has errors.","props":{"disabled":{"type":{"name":"bool"},"required":false,"description":"Allows to disable the button."},"errors":{"type":{"name":"object"},"required":false,"description":"Disables the button with errors."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\Submit\\Example1.js","code":"import React from 'react';\nimport { Submit } from 'romagny13-react-form-validation';\n\nconst Example1 = () => {\n    let errors = { firstname: 'This field is required' };\n    return (\n        <div>\n            <h4>No error</h4>\n            <Submit value=\"Submit\" />\n            \n            <h4>With disabled</h4>\n            <Submit value=\"Submit\" disabled />\n\n            <h4>With errors</h4>\n            <Submit value=\"Submit\" errors={errors} />\n        </div>\n    );\n}\nexport default Example1;\n\n","description":""}]},{"name":"TextArea","description":"Creates a textarea element.","props":{"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"value":{"type":{"name":"string"},"required":false,"description":"The value.","defaultValue":{"value":"''","computed":false}},"onValueChange":{"type":{"name":"func"},"required":false,"description":"The function called on value change."},"onTouch":{"type":{"name":"func"},"required":false,"description":"The function called on touch."}},"examples":[{"name":"Example1","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\TextArea\\Example1.js","code":"import React from 'react';\nimport { TextArea, Label } from 'romagny13-react-form-validation';\n\nclass Example1 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                note: 'My note'\n            },\n            touched: {}\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n    }\n    onValueChange(name, value) {\n        let model = this.state.model;\n        model[name] = value;\n\n        this.setState({\n            model\n        });\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n        this.setState({\n            touched\n        });\n    }\n    render() {\n        const { model, touched } = this.state;\n        return (\n            <div>\n                <Label htmlFor=\"note\" asterisk>Note</Label><br />\n                <TextArea id=\"note\" name=\"note\" value={model[\"note\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} />\n                {touched[\"note\"] && <span className=\"touched\">Touched!</span>}\n                <pre>\n                    {JSON.stringify(model)}\n                </pre>\n            </div>\n        );\n    }\n}\n\nexport default Example1;\n","description":""},{"name":"Example2","path":"C:\\Users\\romag\\Documents\\next-react\\react-form-validation-master\\docs\\examples\\TextArea\\Example2.js","code":"import React from 'react';\nimport { Form, LightGroup, TextArea, CheckboxGroup, Label, required, ValidationHelper } from 'romagny13-react-form-validation';\n\n/** Validation (required) */\nclass Example2 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            model: {\n                note: ''\n            },\n            errors: {},\n            touched: {}\n        };\n\n        this.validators = {\n            note: [required()]\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onTouch = this.onTouch.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onValueChange(name, value) {\n        const { model, touched, submitted } = this.state;\n\n        model[name] = value;\n\n        if (submitted || touched[name]) {\n            let errors = ValidationHelper.validateAll(model, this.validators);\n\n            this.setState({\n                model,\n                errors\n            });\n        }\n        else {\n            this.setState({\n                model\n            });\n        }\n    }\n    onTouch(name) {\n        let touched = this.state.touched;\n        touched[name] = true;\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n\n        this.setState({\n            touched,\n            errors\n        });\n\n    }\n    onSubmit(event) {\n        event.preventDefault();\n\n        let errors = ValidationHelper.validateAll(this.state.model, this.validators);\n        this.setState({\n            submitted: true,\n            errors\n        });\n    }\n    render() {\n        const { model, errors } = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <LightGroup error={errors[\"note\"]}>\n                    <Label htmlFor=\"note\" asterisk>Note</Label><br />\n                    <TextArea id=\"note\" name=\"note\" value={model[\"note\"]} onValueChange={this.onValueChange} onTouch={this.onTouch} rows=\"5\" />\n                </LightGroup>\n\n                <input type=\"submit\" value=\"Submit\" />\n                <pre>\n                    {JSON.stringify(errors)}\n                </pre>\n            </Form>\n        );\n    }\n}\n\nexport default Example2;\n\n","description":"Validation (required) "}]}]